'start
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 # you can test number from 0 to 16
# Default pointers
'#0:16
'#1:1
'#2:2
'#3:3
'#4:4
'#5:5
'#6:6
'#7:7
'#8:8
'#9:9
'#10:10
'#11:11
'#12:12
'#13:13
'#14:14
'#15:15
'#null:0

# delimiter for compiled version (to see the result better)
7070
# return value from functions

'#return_0:0
'#return_1:0
'#return_2:0
'#return_3:0
'#return_4:0
'#return_5:0
'#return_6:0
'#return_7:0
'#return_8:0
'#return_9:0
'#return_A:0
'#return_B:0
'#return_C:0
'#return_D:0
'#return_E:0
'#return_F:0

7070


no_op = (1 1)
earasable = (999)

stop = (~+2 0 ~-2) # Stop the program

# jump to self.0
jump {~+2 0 self.0}

# self.0 = 'code 
exit {
    self.0 '#return_0 stop
}

# self.0 : '[0-F]
# increment value at self.0
inc {
    self.0 'test
    '#15 14
    '#14 13
    '#13 12
    '#12 11
    '#11 10
    '#10 9
    '#9 8
    '#8 7
    '#7 6
    '#6 5
    '#5 4
    '#4 3
    '#3 2
    '#2 1
    '#1 16
    '#0 15
    'test:earasable self.0
}

# self.0 : '[0-F]
# decrement value at self.0
dec {
    self.0 'test
    '#15 16
    '#14 15
    '#13 14
    '#12 13
    '#11 12
    '#10 11
    '#9 10
    '#8 9
    '#7 8
    '#6 7
    '#5 6
    '#4 5
    '#3 4
    '#2 3
    '#1 2
    '#0 1
    'test:earasable self.0
}

# self.0 : '[0-F]
# jump to self.1 if self.0 is 0 
if_0 {
    self.0 'test
    'pt 16
    'end 15
    'end 14
    'end 13
    'end 12
    'end 11
    'end 10
    'end 9
    'end 8
    'end 7
    'end 6
    'end 5
    'end 4
    'end 3
    'end 2
    'end 1
    'test:earasable 0
    jump('end1)
    'pt:self.1
    'end:~+1
    'end1:no_op
}

'v2:0
'v3:0
'v5:0
'v6:0
'v7:0
'v8:0
'v4:0
'v21:0
'v22:0
'v23:0
'v24:0
'v25:0
'v26:0
'v27:0
'v28:0
'v29:0
'v30:0
'v31:0
'v32:0
'v33:0
'v34:0
'v35:0
'v9:0
'v10:0
'v11:0
'v12:0
'v13:0
'v14:0
'v15:0
'v16:0
'v17:0
'v18:0
'v19:0
'v20:0
'v36:0
'v37:0
'v39:0
'v40:0
'v41:0
'v42:0
'v38:0
'v55:0
'v56:0
'v57:0
'v58:0
'v59:0
'v60:0
'v61:0
'v62:0
'v63:0
'v64:0
'v65:0
'v66:0
'v67:0
'v68:0
'v69:0
'v43:0
'v44:0
'v45:0
'v46:0
'v47:0
'v48:0
'v49:0
'v50:0
'v51:0
'v52:0
'v53:0
'v54:0
'v70:0
'v1:0



7070

'start:no_op

'#5 'v2
'#5 'v3
'#0 'v5
'v2 'v5
'#0 'v6
'v3 'v6
'lA1:no_op
'v5 'v7
if_0('v7 'lD2)
jump('lF2)
'lD2:no_op
'v6 'v8
'v8 'v4
jump('lB1)
'lF2:no_op
dec('v5)
dec('v6)
jump('lA1)
'lB1:no_op
if_0('v4 'lD3)
'#6 'v21
'#6 'v22
'v22 '#return_1
'v21 '#return_2
'#1 'v23
'v23 '#return_0
'#1 'v24
'#6 'v25
'v25 '#return_1
'v24 '#return_2
'#1 'v26
'v26 '#return_0
'#12 'v27
'#6 'v28
'v28 '#return_1
'v27 '#return_2
'#1 'v29
'v29 '#return_0
'#3 'v30
'#7 'v31
'v31 '#return_1
'v30 '#return_2
'#1 'v32
'v32 '#return_0
'#5 'v33
'#6 'v34
'v34 '#return_1
'v33 '#return_2
'#1 'v35
'v35 '#return_0
jump('lF3)
'lD3:no_op
'#4 'v9
'#7 'v10
'v10 '#return_1
'v9 '#return_2
'#1 'v11
'v11 '#return_0
'#2 'v12
'#7 'v13
'v13 '#return_1
'v12 '#return_2
'#1 'v14
'v14 '#return_0
'#5 'v15
'#7 'v16
'v16 '#return_1
'v15 '#return_2
'#1 'v17
'v17 '#return_0
'#5 'v18
'#6 'v19
'v19 '#return_1
'v18 '#return_2
'#1 'v20
'v20 '#return_0
'lF3:no_op
'#0 'v36
'#5 'v37
'#0 'v39
'v36 'v39
'#0 'v40
'v37 'v40
'lA4:no_op
'v39 'v41
if_0('v41 'lD5)
jump('lF5)
'lD5:no_op
'v40 'v42
'v42 'v38
jump('lB4)
'lF5:no_op
dec('v39)
dec('v40)
jump('lA4)
'lB4:no_op
if_0('v38 'lD6)
'#6 'v55
'#6 'v56
'v56 '#return_1
'v55 '#return_2
'#1 'v57
'v57 '#return_0
'#1 'v58
'#6 'v59
'v59 '#return_1
'v58 '#return_2
'#1 'v60
'v60 '#return_0
'#12 'v61
'#6 'v62
'v62 '#return_1
'v61 '#return_2
'#1 'v63
'v63 '#return_0
'#3 'v64
'#7 'v65
'v65 '#return_1
'v64 '#return_2
'#1 'v66
'v66 '#return_0
'#5 'v67
'#6 'v68
'v68 '#return_1
'v67 '#return_2
'#1 'v69
'v69 '#return_0
jump('lF6)
'lD6:no_op
'#4 'v43
'#7 'v44
'v44 '#return_1
'v43 '#return_2
'#1 'v45
'v45 '#return_0
'#2 'v46
'#7 'v47
'v47 '#return_1
'v46 '#return_2
'#1 'v48
'v48 '#return_0
'#5 'v49
'#7 'v50
'v50 '#return_1
'v49 '#return_2
'#1 'v51
'v51 '#return_0
'#5 'v52
'#6 'v53
'v53 '#return_1
'v52 '#return_2
'#1 'v54
'v54 '#return_0
'lF6:no_op
'#0 'v70
'v70 'v1
'#3 '#return_1
'v1 '#return_2
'#1 '#return_0

exit('#0)