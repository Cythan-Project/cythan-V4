'start
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 # you can test number from 0 to 16
# Default pointers
'#0:16
'#1:1
'#2:2
'#3:3
'#4:4
'#5:5
'#6:6
'#7:7
'#8:8
'#9:9
'#10:10
'#11:11
'#12:12
'#13:13
'#14:14
'#15:15
'#null:0

# delimiter for compiled version (to see the result better)
7070
# return value from functions

'#return_0:0
'#return_1:0
'#return_2:0
'#return_3:0
'#return_4:0
'#return_5:0
'#return_6:0
'#return_7:0
'#return_8:0
'#return_9:0
'#return_A:0
'#return_B:0
'#return_C:0
'#return_D:0
'#return_E:0
'#return_F:0

7070


no_op = (1 1)
earasable = (999)

stop = (~+2 0 ~-2) # Stop the program

# jump to self.0
jump {~+2 0 self.0}

# self.0 = 'code 
exit {
    self.0 '#return_0 stop
}

# self.0 : '[0-F]
# increment value at self.0
inc {
    self.0 'test
    '#15 14
    '#14 13
    '#13 12
    '#12 11
    '#11 10
    '#10 9
    '#9 8
    '#8 7
    '#7 6
    '#6 5
    '#5 4
    '#4 3
    '#3 2
    '#2 1
    '#1 16
    '#0 15
    'test:earasable self.0
}

# self.0 : '[0-F]
# decrement value at self.0
dec {
    self.0 'test
    '#15 16
    '#14 15
    '#13 14
    '#12 13
    '#11 12
    '#10 11
    '#9 10
    '#8 9
    '#7 8
    '#6 7
    '#5 6
    '#4 5
    '#3 4
    '#2 3
    '#1 2
    '#0 1
    'test:earasable self.0
}

# self.0 : '[0-F]
# jump to self.1 if self.0 is 0 
if_0 {
    self.0 'test
    'pt 16
    'end 15
    'end 14
    'end 13
    'end 12
    'end 11
    'end 10
    'end 9
    'end 8
    'end 7
    'end 6
    'end 5
    'end 4
    'end 3
    'end 2
    'end 1
    'test:earasable 0
    jump('end1)
    'pt:self.1
    'end:~+1
    'end1:no_op
}

'v4:0
'v3:0
'v6:0
'v2:0
'v7:0
'v9:0
'v10:0
'v11:0
'v12:0
'v13:0
'v14:0
'v16:0
'v15:0
'v8:0
'v17:0
'v19:0
'v18:0
'v20:0
'v21:0
'v22:0
'v23:0
'v24:0
'v26:0
'v28:0
'v27:0
'v25:0
'v30:0
'v29:0
'v43:0
'v44:0
'v45:0
'v46:0
'v47:0
'v48:0
'v49:0
'v50:0
'v51:0
'v52:0
'v53:0
'v54:0
'v55:0
'v56:0
'v57:0
'v31:0
'v32:0
'v33:0
'v34:0
'v35:0
'v36:0
'v37:0
'v38:0
'v39:0
'v40:0
'v41:0
'v42:0
'v58:0
'v1:0



7070

'start:no_op

'lA1:no_op
'#2 'v4
'v4 '#return_0
'#return_2 'v6
'v6 'v3
'#0 'v2
'v3 'v2
'#8 'v7
'#0 'v9
'v2 'v9
'#0 'v10
'v7 'v10
'lA2:no_op
'#7 'v11
'#5 'v12
'v12 '#return_1
'v11 '#return_2
'#1 'v13
'v13 '#return_0
'v9 'v14
if_0('v14 'lD3)
jump('lF3)
'lD3:no_op
'#1 'v16
'v16 'v15
'v15 'v8
jump('lB2)
'lF3:no_op
'v10 'v17
if_0('v17 'lD4)
jump('lF4)
'lD4:no_op
'#0 'v19
'v19 'v18
'v18 'v8
jump('lB2)
'lF4:no_op
dec('v9)
dec('v10)
jump('lA2)
'lB2:no_op
if_0('v8 'lD5)
jump('lF5)
'lD5:no_op
jump('lA1)
'lF5:no_op
'#3 'v20
'v20 '#return_1
'v2 '#return_2
'#1 'v21
'v21 '#return_0
'#10 'v22
'#3 'v23
'v23 '#return_1
'v22 '#return_2
'#1 'v24
'v24 '#return_0
'v2 'v26
if_0('v26 'lD7)
jump('lF7)
'lD7:no_op
'#0 'v28
'v28 'v27
'v27 'v25
jump('lG6)
'lF7:no_op
'#1 'v30
'v30 'v29
'v29 'v25
jump('lG6)
'lG6:no_op
if_0('v25 'lD8)
'#6 'v43
'#6 'v44
'v44 '#return_1
'v43 '#return_2
'#1 'v45
'v45 '#return_0
'#1 'v46
'#6 'v47
'v47 '#return_1
'v46 '#return_2
'#1 'v48
'v48 '#return_0
'#12 'v49
'#6 'v50
'v50 '#return_1
'v49 '#return_2
'#1 'v51
'v51 '#return_0
'#3 'v52
'#7 'v53
'v53 '#return_1
'v52 '#return_2
'#1 'v54
'v54 '#return_0
'#5 'v55
'#6 'v56
'v56 '#return_1
'v55 '#return_2
'#1 'v57
'v57 '#return_0
jump('lF8)
'lD8:no_op
'#4 'v31
'#7 'v32
'v32 '#return_1
'v31 '#return_2
'#1 'v33
'v33 '#return_0
'#2 'v34
'#7 'v35
'v35 '#return_1
'v34 '#return_2
'#1 'v36
'v36 '#return_0
'#5 'v37
'#7 'v38
'v38 '#return_1
'v37 '#return_2
'#1 'v39
'v39 '#return_0
'#5 'v40
'#6 'v41
'v41 '#return_1
'v40 '#return_2
'#1 'v42
'v42 '#return_0
'lF8:no_op
jump('lA1)
'lB1:no_op
'#0 'v58
'v58 'v1
'#3 '#return_1
'v1 '#return_2
'#1 '#return_0

exit('#0)