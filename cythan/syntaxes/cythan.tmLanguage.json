{
  "information_for_contributors": [
    "This file has been converted from https://github.com/dustypomerleau/rust-syntax/blob/master/syntaxes/rust.tmLanguage.json",
    "If you want to provide a fix or improvement, please create a pull request against the original repository.",
    "Once accepted there, we are happy to receive an update request."
  ],
  "version": "https://github.com/dustypomerleau/rust-syntax/commit/20462d50ff97338f42c6b64c3f421c634fd60734",
  "name": "Cythan",
  "scopeName": "source.cythan",
  "patterns": [
    {
      "comment": "type",
      "name": "entity.name.type.rust",
      "match": "([A-Z][A-Za-z0-9_]*)",
      "captures": {
        "1": {
          "name": "entity.name.type.rust"
        }
      }
    },
    {
      "comment": "function call",
      "name": "entity.name.function.rust",
      "match": "([a-z][A-Za-z0-9_]*)(\\(|<)",
      "captures": {
        "1": {
          "name": "entity.name.function.rust"
        }
      }
    },
    {
      "comment": "number",
      "name": "constant.numeric.decimal.rust",
      "match": "([0-9]+[a-z]?)",
      "captures": {
        "1": {
          "name": "constant.numeric.decimal.rust"
        }
      }
    },
    {
      "comment": "self",
      "name": "variable.language.self.rust",
      "match": "(self|class)",
      "captures": {
        "1": {
          "name": "variable.language.self.rust"
        }
      }
    },
    {
      "comment": "keywords",
      "name": "keyword.control.rust",
      "match": "(class|const|extern|crate|enum|impl|match|if|loop|while|for|continue|break|return|else)",
      "captures": {
        "1": {
          "name": "keyword.control.rust"
        }
      }
    },
    {
      "comment": "double-quoted strings and byte strings",
      "name": "string.quoted.double.rust",
      "begin": "(\")",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.string.rust"
        }
      },
      "end": "\"",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.rust"
        }
      },
      "patterns": [
        {
          "comment": "escapes: ASCII, byte, Unicode, quote, regex",
          "name": "constant.character.escape.rust",
          "match": "(\\\\)(?:(?:(x[0-7][0-7a-fA-F])|(u(\\{)[\\da-fA-F]{4,6}(\\}))|.))",
          "captures": {
            "1": {
              "name": "constant.character.escape.backslash.rust"
            },
            "2": {
              "name": "constant.character.escape.bit.rust"
            },
            "3": {
              "name": "constant.character.escape.unicode.rust"
            },
            "4": {
              "name": "constant.character.escape.unicode.punctuation.rust"
            },
            "5": {
              "name": "constant.character.escape.unicode.punctuation.rust"
            }
          }
        }
      ]
    },
    {
      "comment": "variable",
      "name": "variable.other.rust",
      "match": "([a-z][A-Za-z0-9_]*)",
      "captures": {
        "1": {
          "name": "variable.other.rust"
        }
      }
    }
  ]
}
